name: Fetch

on:
  workflow_dispatch:
  schedule:
    # 0表达式生成 https://crontab.guru/
    - cron: '0 0/3 * * *'
  push:
    paths:
      - 'sources.list'
      - 'config.yml'
      - 'abpwhite.txt'
      - '.github/workflows/**'
      - '**.py'
      - 'snippets/_*'

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
    - name: 迁出代码
      uses: actions/checkout@v4
    - name: 设置时区
      run: sudo timedatectl set-timezone 'Asia/Shanghai'
    - name: 安装 Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'
    - name: 安装依赖
      run: pip install -r requirements.txt
    - name: 执行任务
      run: python ./fetch.py
      
    - name: 提交更改
      run: |                 
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git pull origin master
        git add list*
        git add snippets/
        git commit -m "$(date '+%Y-%m-%d %H:%M:%S') 抓取节点"
    - name: 推送更改
      uses: ad-m/github-push-action@master
      with:
        branch: master

    - name: 计算要清除缓存的文件
      id: purge_urls
      run: |
        sleep 5
        baseUrl="https://cdn.jsdelivr.net/gh/${{ github.repository }}@master"
        urls=""
        for f in `find snippets -name "*.yml" -type f`; do
          urls+="${baseUrl}/${f},"
        done
        for f in `find . -name "list*" -type f -maxdepth 1`; do
          urls+="${baseUrl}/${f},"
        done
        echo "urls=${urls%,*}" >> $GITHUB_OUTPUT
    - name: 清除 JsDelivr CDN 缓存
      uses: egad13/purge-jsdelivr-cache@v1
      with:
        url: ${{ steps.purge_urls.outputs.urls }}
      continue-on-error: true

    # 新增的 Gist 上传步骤 
    - name: 通过 API 更新 Gist（多文件）
      env:
        GIST_ID: ${{ secrets.GIST_ID }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        #!/bin/bash
        set -euo pipefail  # 严格模式：错误退出、未定义变量报错

        # 安装必要工具
        sudo apt-get update && sudo apt-get install -y jq

        # 定义要上传的文件列表
        FILES=(
          "list.yml"
          "snippets/nodes_HK.meta.yml"
          "snippets/nodes_TW.meta.yml"
          "snippets/nodes_SG.meta.yml"
          "snippets/nodes_JP.meta.yml"
          "snippets/nodes_US.meta.yml"
          "snippets/nodes_KR.meta.yml"
        )

        # 构建文件内容 JSON 对象
        FILES_JSON="{}"
        for FILE_PATH in "${FILES[@]}"; do
          FILE_NAME=$(basename "$FILE_PATH")
          # 使用 --rawfile 直接从文件读取内容，避免参数过长
          FILES_JSON=$(jq --null-input \
            --arg name "$FILE_NAME" \
            --rawfile content "$FILE_PATH" \
            --argjson current "$FILES_JSON" \
            '$current + { ($name): { "content": $content, "filename": $name } }'
          )
        done

        # 构造完整 JSON 请求体
        JSON_BODY=$(jq -n \
          --arg desc "Auto-updated config files" \
          --argjson files "$FILES_JSON" \
          '{ description: $desc, files: $files }'
        )

        # 发送 API 请求
        curl -sS -X PATCH \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          -d "$JSON_BODY" \
          "https://api.github.com/gists/$GIST_ID"
